name: integration test
on:
  pull_request:
  push:
    branches:
      - "main"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - run: npm ci
      - run: npm run build
      - run: npm prune --production
      - uses: actions/upload-artifact@v2
        with:
          name: action
          path: ./

  job1:
    runs-on: ubuntu-latest
    needs: 'build'
    outputs:
      result: ${{ steps.critical-section.outputs.result }}
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: action
      - name: run the action
        uses: ./
      - id: critical-section
        name: critical section
        run: |
          START=$(date --rfc-3339=ns)
          sleep 10
          END=$(date --rfc-3339=ns)
          echo "::set-output name=result::$START $END"

  job2:
    runs-on: ubuntu-latest
    needs: 'build'
    outputs:
      result: ${{ steps.critical-section.outputs.result }}
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: action
      - name: run the action
        uses: ./
      - id: critical-section
        name: critical section
        run: |
          START=$(date --rfc-3339=ns)
          sleep 10
          END=$(date --rfc-3339=ns)
          echo "::set-output name=result::$START $END"

  job3:
    runs-on: ubuntu-latest
    needs: 'build'
    outputs:
      result: ${{ steps.critical-section.outputs.result }}
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: action
      - name: run the action
        uses: ./
      - id: critical-section
        name: critical section
        run: |
          START=$(date --rfc-3339=ns)
          sleep 10
          END=$(date --rfc-3339=ns)
          echo "::set-output name=result::$START $END"

  validation:
    runs-on: ubuntu-latest
    needs:
      - job1
      - job2
      - job3
    steps:
      - run: echo TODO
        env:
          NEEDS_CONTEXT: ${{ toJson(needs) }}
