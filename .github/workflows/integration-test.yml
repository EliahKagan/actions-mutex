name: integration test

on: [push, pull_request, workflow_dispatch]

jobs:
  # the integration test requires write permissions.
  # if GITHUB_TOKEN doesn't have enough permissions, skip the test.
  check-permission:
    name: check permission
    runs-on: ubuntu-latest
    outputs:
      permission: ${{ steps.check.outputs.permission }}
    steps:
      - id: check
        uses: shogo82148/actions-check-permissions@v1

  build:
    runs-on: ubuntu-latest
    needs:
      - check-permission
    if: needs.check-permission.outputs.permission == 'write'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - run: npm ci
      - run: npm run build
      - run: npm prune --production
      - uses: actions/upload-artifact@v2
        with:
          name: action
          path: ./

  job1:
    runs-on: ubuntu-latest
    needs: 'build'
    outputs:
      result: ${{ steps.critical-section.outputs.result }}
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: action
      - name: run the action
        uses: ./
      - id: critical-section
        name: critical section
        run: |
          START=$(date --iso-8601=ns)
          sleep 10
          END=$(date --iso-8601=ns)
          echo "::set-output name=result::$START $END"

  job2:
    runs-on: ubuntu-latest
    needs: 'build'
    outputs:
      result: ${{ steps.critical-section.outputs.result }}
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: action
      - name: run the action
        uses: ./
      - id: critical-section
        name: critical section
        run: |
          START=$(date --iso-8601=ns)
          sleep 10
          END=$(date --iso-8601=ns)
          echo "::set-output name=result::$START $END"

  job3:
    runs-on: ubuntu-latest
    needs: 'build'
    outputs:
      result: ${{ steps.critical-section.outputs.result }}
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: action
      - name: run the action
        uses: ./
      - id: critical-section
        name: critical section
        run: |
          START=$(date --iso-8601=ns)
          sleep 10
          END=$(date --iso-8601=ns)
          echo "::set-output name=result::$START $END"

  validation:
    runs-on: ubuntu-latest
    needs:
      - job1
      - job2
      - job3
    steps:
      - run: |
          { echo "$JOB1"; echo "$JOB2"; echo "$JOB3"; } | sort | xargs -n1 echo | sort --check
        env:
          JOB1: ${{ needs.job1.outputs.result }}
          JOB2: ${{ needs.job2.outputs.result }}
          JOB3: ${{ needs.job3.outputs.result }}
